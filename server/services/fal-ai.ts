import * as fal from "@fal-ai/serverless-client";
import { config } from "dotenv";

// Load environment variables
config({ path: ".env" });

// Configure Fal AI
fal.config({
  credentials: process.env.FAL_AI_API_KEY,
});

export interface FalAIGenerationParams {
  prompt: string;
  stylePrompt: any; // JSON prompt from style
  colors?: string[];
  imageUrl?: string;
}

export interface FalAIResponse {
  images: Array<{
    url: string;
    width: number;
    height: number;
  }>;
}

export class FalAIService {
  private static readonly DEFAULT_MODEL = "fal-ai/fast-sdxl";
  private static readonly MAX_RETRIES = 3;
  private static readonly RETRY_DELAY = 1000; // 1 second

  static async generateImage(params: FalAIGenerationParams): Promise<string> {
    const { prompt, stylePrompt, colors, imageUrl } = params;

    // Build the enhanced prompt with style information
    const enhancedPrompt = this.buildEnhancedPrompt(
      prompt,
      stylePrompt,
      colors,
    );

    try {
      const input: any = {
        prompt: enhancedPrompt,
        image_size: "square_hd",
        num_inference_steps: 25,
        guidance_scale: 7.5,
        num_images: 1,
        enable_safety_checker: true,
      };

      // Add image input if provided (for image-to-image generation)
      if (imageUrl) {
        input.image_url = imageUrl;
        input.strength = 0.8; // How much to change the input image
      }

      const result = await this.makeRequestWithRetry(input);

      if (!result.images || result.images.length === 0) {
        throw new Error("No images generated by Fal AI");
      }

      return result.images[0].url;
    } catch (error) {
      console.error("Fal AI generation error:", error);
      throw new Error(
        `Image generation failed: ${error instanceof Error ? error.message : "Unknown error"}`,
      );
    }
  }

  private static async makeRequestWithRetry(
    input: any,
    retries: number = 0,
  ): Promise<FalAIResponse> {
    try {
      const result = await fal.subscribe(this.DEFAULT_MODEL, {
        input,
        logs: true,
        onQueueUpdate: (update) => {
          if (update.status === "IN_PROGRESS") {
            console.log("Fal AI generation in progress:", update.logs);
          }
        },
      });

      return result as FalAIResponse;
    } catch (error) {
      if (retries < this.MAX_RETRIES) {
        console.log(`Retrying Fal AI request (attempt ${retries + 1})...`);
        await new Promise((resolve) =>
          setTimeout(resolve, this.RETRY_DELAY * (retries + 1)),
        );
        return this.makeRequestWithRetry(input, retries + 1);
      }
      throw error;
    }
  }

  private static buildEnhancedPrompt(
    userPrompt: string,
    stylePrompt: any,
    colors?: string[],
  ): string {
    let enhancedPrompt = userPrompt;

    // Add style information
    if (stylePrompt?.style) {
      enhancedPrompt += `, ${stylePrompt.style} style`;
    }

    // Add material information
    if (stylePrompt?.materials) {
      const materials = stylePrompt.materials;
      if (materials.texture) {
        enhancedPrompt += `, ${materials.texture} texture`;
      }
      if (materials.surface_reflectivity) {
        enhancedPrompt += `, ${materials.surface_reflectivity} surface`;
      }
    }

    // Add geometry information
    if (stylePrompt?.geometry) {
      const geometry = stylePrompt.geometry;
      if (geometry.blocky_structure) {
        enhancedPrompt += `, blocky voxel structure`;
      }
      if (geometry.isometric_projection) {
        enhancedPrompt += `, isometric view`;
      }
    }

    // Add color information
    if (colors && colors.length > 0) {
      const colorNames = colors
        .map((color) => this.hexToColorName(color))
        .join(" and ");
      enhancedPrompt += `, using ${colorNames} colors`;
    }

    // Add background specification
    if (stylePrompt?.background?.transparent_png_ready) {
      enhancedPrompt += `, transparent background, PNG ready`;
    }

    // Add quality modifiers
    enhancedPrompt +=
      ", high quality, detailed, professional 3D render, clean composition";

    return enhancedPrompt;
  }

  private static hexToColorName(hex: string): string {
    // Simple hex to color name mapping
    const colorMap: { [key: string]: string } = {
      "#FF0000": "red",
      "#00FF00": "green",
      "#0000FF": "blue",
      "#FFFF00": "yellow",
      "#FF00FF": "magenta",
      "#00FFFF": "cyan",
      "#FFA500": "orange",
      "#800080": "purple",
      "#FFC0CB": "pink",
      "#000000": "black",
      "#FFFFFF": "white",
      "#808080": "gray",
      "#8B4513": "brown",
      "#FFD700": "gold",
      "#C0C0C0": "silver",
    };

    // Convert to uppercase for comparison
    const upperHex = hex.toUpperCase();

    // Return exact match if found
    if (colorMap[upperHex]) {
      return colorMap[upperHex];
    }

    // Otherwise, return the hex value
    return hex;
  }

  static async checkApiKey(): Promise<boolean> {
    try {
      // Simple test to check if API key is valid
      const result = await fal.subscribe("fal-ai/fast-sdxl", {
        input: {
          prompt: "test",
          image_size: "square",
          num_inference_steps: 1,
          num_images: 1,
        },
      });
      return true;
    } catch (error) {
      console.error("Fal AI API key validation failed:", error);
      return false;
    }
  }
}
